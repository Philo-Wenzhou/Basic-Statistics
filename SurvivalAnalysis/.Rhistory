library(survival)
library(survminer)
# 查看数据集中的缺失值情况
sum(is.na(lung))
# 处理缺失值 - 这里选择删除包含缺失值的行
lung_clean <- na.omit(lung[, c("time", "status", "age", "ph.ecog", "ph.karno")])
# 重新绘制风险函数图
p8 <- ggcoxfunctional(
Surv(time, status) ~ log(age) + sqrt(ph.ecog) + ph.karno,
data = lung_clean
)
# 显示图形
print(p8)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE, fig.width = 8, fig.height = 6, fig.align = "center", dpi = 300)
# 全局设置
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# 安装必要的R包
if (!require(survival)) install.packages("survival")  # 核心生存分析包
if (!require(survminer)) install.packages("survminer")  # 生存分析可视化
if (!require(ggplot2)) install.packages("ggplot2")    # 数据可视化
if (!require(dplyr)) install.packages("dplyr")        # 数据处理
if (!require(tidyr)) install.packages("tidyr")        # 数据整理
# 加载R包
suppressPackageStartupMessages(library(survival))
suppressPackageStartupMessages(library(survminer))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(tidyr))
# 设置中文字体支持
if (.Platform$OS.type == "windows") {
windowsFonts("SimHei" = windowsFont("SimHei"))
theme_set(theme_grey(base_family = "SimHei"))
} else if (.Platform$OS.type == "unix") {
theme_set(theme_grey(base_family = "WenQuanYi Micro Hei"))
}
# 创建自定义主题
theme_survival <- function() {
theme_bw() +
theme(
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 14, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
strip.text = element_text(size = 12, face = "bold")
)
}
head(surv_object)
surv_object
# 设置全局参数
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE,
fig.width = 8,
fig.height = 6,
fig.align = "center",
dpi = 300,
# 设置输出目录
fig.path = "output/",
# 设置图片格式为PNG
dev = function(filename, width, height, ...) {
png(filename = filename, width = width, height = height, res = 300, units = "in", ...)
},
# 设置表格格式为三线表
results = "asis"
)
# 设置表格输出格式
options(knitr.kable.NA = '', knitr.table.format = "markdown")
# 安装必要的R包
if (!require(survival)) install.packages("survival")  # 核心生存分析包
if (!require(survminer)) install.packages("survminer")  # 生存分析可视化
if (!require(ggplot2)) install.packages("ggplot2")    # 数据可视化
if (!require(dplyr)) install.packages("dplyr")        # 数据处理
if (!require(tidyr)) install.packages("tidyr")        # 数据整理
# 加载R包
suppressPackageStartupMessages(library(survival))
suppressPackageStartupMessages(library(survminer))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(tidyr))
# 设置中文字体支持
if (.Platform$OS.type == "windows") {
windowsFonts("SimHei" = windowsFont("SimHei"))
theme_set(theme_grey(base_family = "SimHei"))
} else if (.Platform$OS.type == "unix") {
theme_set(theme_grey(base_family = "WenQuanYi Micro Hei"))
}
# 创建自定义主题
theme_survival <- function() {
theme_bw() +
theme(
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 14, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
strip.text = element_text(size = 12, face = "bold")
)
}
# 设置全局参数
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE,
fig.width = 8,
fig.height = 6,
fig.align = "center",
dpi = 300,
# 设置输出目录
fig.path = "output/",
# 设置图片格式为PNG
dev = function(filename, width, height, ...) {
png(filename = filename, width = width, height = height, res = 300, units = "in", ...)
},
# 设置表格格式为三线表
results = "asis"
)
# 设置表格输出格式
options(knitr.kable.NA = '', knitr.table.format = "markdown")
# 安装必要的R包
if (!require(survival)) install.packages("survival")  # 核心生存分析包
if (!require(survminer)) install.packages("survminer")  # 生存分析可视化
if (!require(ggplot2)) install.packages("ggplot2")    # 数据可视化
if (!require(dplyr)) install.packages("dplyr")        # 数据处理
if (!require(tidyr)) install.packages("tidyr")        # 数据整理
# 加载R包
suppressPackageStartupMessages(library(survival))
suppressPackageStartupMessages(library(survminer))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(tidyr))
# 设置中文字体支持
if (.Platform$OS.type == "windows") {
windowsFonts("SimHei" = windowsFont("SimHei"))
theme_set(theme_grey(base_family = "SimHei"))
} else if (.Platform$OS.type == "unix") {
theme_set(theme_grey(base_family = "WenQuanYi Micro Hei"))
}
# 创建自定义主题
theme_survival <- function() {
theme_bw() +
theme(
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 14, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
strip.text = element_text(size = 12, face = "bold")
)
}
# 定义分布函数
h_exp <- function(t, lambda) lambda
S_exp <- function(t, lambda) exp(-lambda * t)
h_weibull <- function(t, lambda, k) k * lambda * (lambda * t)^(k-1)
S_weibull <- function(t, lambda, k) exp(-(lambda * t)^k)
# 绘制生存函数曲线
t <- seq(0, 5, length = 100)
lambda <- 1
par(mfrow = c(1, 2))
plot(t, S_exp(t, lambda), type = "l", main = "指数分布生存函数",
xlab = "时间t", ylab = "S(t)", ylim = c(0, 1))
plot(t, S_weibull(t, lambda, k=0.5), type = "l", col = "blue",
main = "Weibull分布生存函数", xlab = "时间t", ylab = "S(t)", ylim = c(0, 1))
lines(t, S_weibull(t, lambda, k=1), col = "red")  # 等同于指数分布
lines(t, S_weibull(t, lambda, k=2), col = "green")
legend("topright", legend = c("k=0.5", "k=1", "k=2"),
col = c("blue", "red", "green"), lty = 1)
par(mfrow = c(1, 1))
# 安装必要的R包
if (!require(survival)) install.packages("survival")
if (!require(survminer)) install.packages("survminer")
if (!require(ggplot2)) install.packages("ggplot2")
if (!require(dplyr)) install.packages("dplyr")
if (!require(tidyr)) install.packages("tidyr")
# 加载R包
suppressPackageStartupMessages(library(survival))
suppressPackageStartupMessages(library(survminer))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(tidyr))
# 查看lung数据集结构
cat("=== lung数据集结构 ===\n")
str(lung)
head(lung)
# 查看ovarian数据集结构
cat("\n=== ovarian数据集结构 ===\n")
str(ovarian)
head(ovarian)
# 查看aml数据集结构
cat("\n=== aml数据集结构 ===\n")
str(aml)
head(aml)
# 数据预处理：将性别变量转换为因子
lung$sex <- factor(lung$sex, levels = c(1, 2), labels = c("男性", "女性"))
head(lung$sex)
# 创建生存对象
surv_object <- Surv(time = lung$time, event = lung$status)
cat("生存对象的前6行：\n")
head(surv_object)
# 进行KM估计
km_fit <- survfit(surv_object ~ 1, data = lung)
cat("KM估计结果摘要：\n")
summary(km_fit)
# 分组KM分析（按性别）
km_fit_sex <- survfit(surv_object ~ sex, data = lung)
# 绘制基础KM曲线
p1 <- ggsurvplot(
km_fit,
data = lung,
risk.table = TRUE,         # 添加风险人数表
pval = FALSE,              # 单组数据不需要p值检验
conf.int = TRUE,           # 添加置信区间
xlab = "生存时间（天）",    # x轴标签
ylab = "生存概率",          # y轴标签
title = "肺癌患者总体Kaplan-Meier生存曲线", # 标题
legend.title = "分组",      # 图例标题
legend.labs = c("总体"),    # 图例标签
palette = "blue",          # 颜色
ggtheme = theme_bw()        # 使用黑白主题
)
p1
# 分组KM分析（按性别）
km_fit_sex <- survfit(surv_object ~ sex, data = lung)
# 分组KM分析（按性别）
km_fit_sex <- survfit(surv_object ~ sex, data = lung)
cat("按性别分组的KM估计结果摘要：\n")
summary(km_fit_sex)
surv_object
lung
# 定义分布函数
h_exp <- function(t, lambda) lambda
S_exp <- function(t, lambda) exp(-lambda * t)
h_weibull <- function(t, lambda, k) k * lambda * (lambda * t)^(k-1)
S_weibull <- function(t, lambda, k) exp(-(lambda * t)^k)
# 绘制生存函数曲线
t <- seq(0, 5, length = 100)
lambda <- 1
par(mfrow = c(1, 2))
plot(t, S_exp(t, lambda), type = "l", main = "指数分布生存函数",
xlab = "时间t", ylab = "S(t)", ylim = c(0, 1))
plot(t, S_weibull(t, lambda, k=0.5), type = "l", col = "blue",
main = "Weibull分布生存函数", xlab = "时间t", ylab = "S(t)", ylim = c(0, 1))
lines(t, S_weibull(t, lambda, k=1), col = "red")  # 等同于指数分布
lines(t, S_weibull(t, lambda, k=2), col = "green")
legend("topright", legend = c("k=0.5", "k=1", "k=2"),
col = c("blue", "red", "green"), lty = 1)
par(mfrow = c(1, 1))
# 安装必要的R包
if (!require(survival)) install.packages("survival")
if (!require(survminer)) install.packages("survminer")
if (!require(ggplot2)) install.packages("ggplot2")
if (!require(dplyr)) install.packages("dplyr")
if (!require(tidyr)) install.packages("tidyr")
# 加载R包
suppressPackageStartupMessages(library(survival))
suppressPackageStartupMessages(library(survminer))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(tidyr))
# 查看lung数据集结构
cat("=== lung数据集结构 ===\n")
str(lung)
head(lung)
# 查看ovarian数据集结构
cat("\n=== ovarian数据集结构 ===\n")
str(ovarian)
head(ovarian)
# 查看aml数据集结构
cat("\n=== aml数据集结构 ===\n")
str(aml)
head(aml)
# 数据预处理：将性别变量转换为因子
lung$sex <- factor(lung$sex, levels = c(1, 2), labels = c("男性", "女性"))
head(lung$sex)
# 查看lung数据集结构
cat("=== lung数据集结构 ===\n")
str(lung)
head(lung)
# 查看ovarian数据集结构
cat("\n=== ovarian数据集结构 ===\n")
str(ovarian)
head(ovarian)
# 查看aml数据集结构
cat("\n=== aml数据集结构 ===\n")
str(aml)
head(aml)
# 数据预处理：将性别变量转换为因子
lung$sex <- factor(lung$sex, levels = c(1, 2), labels = c("男性", "女性"))
head(lung$sex)
# 分组KM分析（按性别）
km_fit_sex <- survfit(surv_object ~ sex, data = ovarian)
cat("按性别分组的KM估计结果摘要：\n")
summary(km_fit_sex)
lung
# 设置全局参数
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE,
fig.width = 8,
fig.height = 6,
fig.align = "center",
dpi = 300,
# 设置输出目录
fig.path = "output/",
# 设置图片格式为PNG
dev = function(filename, width, height, ...) {
png(filename = filename, width = width, height = height, res = 300, units = "in", ...)
},
# 设置表格格式为三线表
results = "asis"
)
# 设置表格输出格式
options(knitr.kable.NA = '', knitr.table.format = "markdown")
# 安装必要的R包
if (!require(survival)) install.packages("survival")  # 核心生存分析包
if (!require(survminer)) install.packages("survminer")  # 生存分析可视化
if (!require(ggplot2)) install.packages("ggplot2")    # 数据可视化
if (!require(dplyr)) install.packages("dplyr")        # 数据处理
if (!require(tidyr)) install.packages("tidyr")        # 数据整理
# 加载R包
suppressPackageStartupMessages(library(survival))
suppressPackageStartupMessages(library(survminer))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(tidyr))
# 设置中文字体支持
if (.Platform$OS.type == "windows") {
windowsFonts("SimHei" = windowsFont("SimHei"))
theme_set(theme_grey(base_family = "SimHei"))
} else if (.Platform$OS.type == "unix") {
theme_set(theme_grey(base_family = "WenQuanYi Micro Hei"))
}
# 创建自定义主题
theme_survival <- function() {
theme_bw() +
theme(
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 14, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
strip.text = element_text(size = 12, face = "bold")
)
}
# 定义分布函数
h_exp <- function(t, lambda) lambda
S_exp <- function(t, lambda) exp(-lambda * t)
h_weibull <- function(t, lambda, k) k * lambda * (lambda * t)^(k-1)
S_weibull <- function(t, lambda, k) exp(-(lambda * t)^k)
# 绘制生存函数曲线
t <- seq(0, 5, length = 100)
lambda <- 1
par(mfrow = c(1, 2))
plot(t, S_exp(t, lambda), type = "l", main = "指数分布生存函数",
xlab = "时间t", ylab = "S(t)", ylim = c(0, 1))
plot(t, S_weibull(t, lambda, k=0.5), type = "l", col = "blue",
main = "Weibull分布生存函数", xlab = "时间t", ylab = "S(t)", ylim = c(0, 1))
lines(t, S_weibull(t, lambda, k=1), col = "red")  # 等同于指数分布
lines(t, S_weibull(t, lambda, k=2), col = "green")
legend("topright", legend = c("k=0.5", "k=1", "k=2"),
col = c("blue", "red", "green"), lty = 1)
par(mfrow = c(1, 1))
# 安装必要的R包
if (!require(survival)) install.packages("survival")
if (!require(survminer)) install.packages("survminer")
if (!require(ggplot2)) install.packages("ggplot2")
if (!require(dplyr)) install.packages("dplyr")
if (!require(tidyr)) install.packages("tidyr")
# 加载R包
suppressPackageStartupMessages(library(survival))
suppressPackageStartupMessages(library(survminer))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(tidyr))
# 查看lung数据集结构
cat("=== lung数据集结构 ===\n")
str(lung)
head(lung)
# 查看ovarian数据集结构
cat("\n=== ovarian数据集结构 ===\n")
str(ovarian)
head(ovarian)
# 查看aml数据集结构
cat("\n=== aml数据集结构 ===\n")
str(aml)
head(aml)
# 数据预处理：将性别变量转换为因子
lung$sex <- factor(lung$sex, levels = c(1, 2), labels = c("男性", "女性"))
head(lung$sex)
# 创建生存对象
surv_object <- Surv(time = lung$time, event = lung$status)
cat("生存对象的前6行：\n")
head(surv_object)
# 进行KM估计
km_fit <- survfit(surv_object ~ 1, data = lung)
cat("KM估计结果摘要：\n")
summary(km_fit)
# 分组KM分析（按性别）
km_fit_sex <- survfit(surv_object ~ sex, data = lung)
cat("按性别分组的KM估计结果摘要：\n")
summary(km_fit_sex)
# 绘制基础KM曲线
p1 <- ggsurvplot(
km_fit,
data = lung,
risk.table = TRUE,         # 添加风险人数表
pval = FALSE,              # 单组数据不需要p值检验
conf.int = TRUE,           # 添加置信区间
xlab = "生存时间（天）",    # x轴标签
ylab = "生存概率",          # y轴标签
title = "肺癌患者总体Kaplan-Meier生存曲线", # 标题
legend.title = "分组",      # 图例标题
legend.labs = c("总体"),    # 图例标签
palette = "blue",          # 颜色
ggtheme = theme_bw()        # 使用黑白主题
)
p1
# 绘制分组KM曲线
p2 <- ggsurvplot(
km_fit_sex,
data = lung,
risk.table = TRUE,         # 添加风险人数表
pval = TRUE,               # 添加Log-rank检验p值
conf.int = TRUE,           # 添加置信区间
xlab = "生存时间（天）",    # x轴标签
ylab = "生存概率",          # y轴标签
title = "不同性别肺癌患者的Kaplan-Meier生存曲线比较", # 标题
legend.title = "性别",      # 图例标题
legend.labs = c("男性", "女性"), # 图例标签
palette = c("#E7B800", "#2E9FDF"), # 颜色
ggtheme = theme_bw()        # 使用黑白主题
)
p2
# 单独进行Log-rank检验
surv_diff <- survdiff(surv_object ~ sex, data = lung)
surv_diff
# 创建基础Cox模型（仅包含性别变量）
cox1 <- coxph(Surv(time, status) ~ sex, data = lung)
cat("基础Cox回归模型摘要：\n")
summary(cox1)
# 创建包含多个协变量的Cox模型
cox2 <- coxph(Surv(time, status) ~ sex + age + ph.ecog + wt.loss, data = lung)
cat("多变量Cox回归模型摘要：\n")
summary(cox2)
# 使用Schoenfeld残差检验比例风险假设
test_ph <- cox.zph(cox2)
cat("比例风险假设检验结果：\n")
test_ph
# 可视化比例风险假设检验结果
p5 <- ggcoxzph(test_ph, se = TRUE)
p5
**图6：比例风险假设检验结果** 该图展示了Cox比例风险模型的比例风险假设检验结果。图中的曲线应该大致呈水平状态，没有明显的趋势，才能支持比例风险假设。从图中可以看出，的模型基本满足比例风险假设。
# 准备AML数据集
aml$group <- factor(aml$x, levels = c("Maintained", "Nonmaintained"),
labels = c("维持治疗", "非维持治疗"))
surv_object_aml <- Surv(time = aml$time, event = aml$status)
km_fit_aml <- survfit(surv_object_aml ~ group, data = aml)
# 绘制AML患者的KM曲线
p4 <- ggsurvplot(
km_fit_aml,
data = aml,
risk.table = TRUE,
pval = TRUE,
conf.int = TRUE,
xlab = "生存时间（周）",
ylab = "生存概率",
title = "AML患者不同治疗方案的生存曲线比较",
legend.title = "治疗方案",
legend.labs = c("维持治疗", "非维持治疗"),
palette = c("#7E6148FF", "#4DBBD5FF"),
ggtheme = theme_bw()
)
p4
# 组合生存曲线图
p_list <- list(p2, p4)
combined_plots <- arrange_ggsurvplots(p_list, ncol = 2, nrow = 1)
combined_plots
# 组合生存曲线图
p_list <- list(p2, p4)
arrange_ggsurvplots(p_list, ncol = 2, nrow = 1)
# 加载必要的库
library(survival)
library(survminer)
# 查看数据集中的缺失值情况
sum(is.na(lung))
# 处理缺失值 - 这里选择删除包含缺失值的行
lung_clean <- na.omit(lung[, c("time", "status", "age", "ph.ecog", "ph.karno")])
# 重新绘制风险函数图
p8 <- ggcoxfunctional(
Surv(time, status) ~ log(age) + sqrt(ph.ecog) + ph.karno,
data = lung_clean
)
# 显示图形
print(p8)
# 加载必要的库
library(survival)
library(survminer)
# 处理缺失值 - 这里选择删除包含缺失值的行
lung_clean <- na.omit(lung[, c("time", "status", "age", "ph.ecog", "ph.karno")])
# 重新绘制风险函数图
p8 <- ggcoxfunctional(
Surv(time, status) ~ log(age) + sqrt(ph.ecog) + ph.karno,
data = lung_clean
)
# 显示图形
print(p8)
